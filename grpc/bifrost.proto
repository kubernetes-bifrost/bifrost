// MIT License
//
// Copyright (c) 2025 kubernetes-bifrost
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package bifrost.v1;

option go_package = "github.com/kubernetes-bifrost/bifrost/grpc/go;bifr√∂stpb";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

service Bifrost {
	rpc GetVersion (GetVersionRequest) returns (GetVersionResponse) {
		option (google.api.http) = {
			get: "/v1/version"
		};
	}

	rpc GetToken (GetTokenRequest) returns (GetTokenResponse) {
		option (google.api.http) = {
			get: "/v1/token"
		};
	}
}

enum Provider {
	aws = 0;
	azure = 1;
	gcp = 2;
}

message ContainerRegistryLogin {
	string username = 1;
	string password = 2;
	google.protobuf.Timestamp expires_at = 3;
}

message GetVersionRequest {}

message GetVersionResponse {
	string version = 1;
}

message GetTokenRequest {
	Provider provider = 1;
	string container_registry = 2;

	oneof provider_params {
		AWSParams aws = 100;
		AzureParams azure = 101;
		GCPParams gcp = 102;
	}
}

message GetTokenResponse {
	oneof token {
		ContainerRegistryLogin registry_login = 1;
		AWSAssumeRole aws = 100;
		AzureToken azure = 101;
		GCPToken gcp = 102;
	}
}

message AWSParams {
	string role_arn = 1;
	string role_session_name = 2;
}

message AWSAssumeRole {
	string access_key_id = 1;
	string secret_access_key = 2;
	string session_token = 3;
	google.protobuf.Timestamp expiration = 4;
}

message AzureParams {
	string client_id = 1;
	string tenant_id = 2;
	repeated string scopes = 3;
}

message AzureToken {
	string token = 1;
	google.protobuf.Timestamp expires_on = 2;
}

message GCPParams {
	string service_account_email = 1;
	string workload_identity_provider = 2;
}

message GCPToken {
	string access_token = 1;
	string token_type = 2;
	string refresh_token = 3;
	google.protobuf.Timestamp expiry = 4;
	int64 expires_in = 5;
}
