// MIT License
//
// Copyright (c) 2025 kubernetes-bifrost
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: azure.proto

package azurepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Bifrost_GetToken_FullMethodName                  = "/azure.v1.Bifrost/GetToken"
	Bifrost_GetContainerRegistryLogin_FullMethodName = "/azure.v1.Bifrost/GetContainerRegistryLogin"
)

// BifrostClient is the client API for Bifrost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BifrostClient interface {
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	GetContainerRegistryLogin(ctx context.Context, in *GetContainerRegistryLoginRequest, opts ...grpc.CallOption) (*ContainerRegistryLogin, error)
}

type bifrostClient struct {
	cc grpc.ClientConnInterface
}

func NewBifrostClient(cc grpc.ClientConnInterface) BifrostClient {
	return &bifrostClient{cc}
}

func (c *bifrostClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, Bifrost_GetToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bifrostClient) GetContainerRegistryLogin(ctx context.Context, in *GetContainerRegistryLoginRequest, opts ...grpc.CallOption) (*ContainerRegistryLogin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContainerRegistryLogin)
	err := c.cc.Invoke(ctx, Bifrost_GetContainerRegistryLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BifrostServer is the server API for Bifrost service.
// All implementations must embed UnimplementedBifrostServer
// for forward compatibility.
type BifrostServer interface {
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	GetContainerRegistryLogin(context.Context, *GetContainerRegistryLoginRequest) (*ContainerRegistryLogin, error)
	mustEmbedUnimplementedBifrostServer()
}

// UnimplementedBifrostServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBifrostServer struct{}

func (UnimplementedBifrostServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedBifrostServer) GetContainerRegistryLogin(context.Context, *GetContainerRegistryLoginRequest) (*ContainerRegistryLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerRegistryLogin not implemented")
}
func (UnimplementedBifrostServer) mustEmbedUnimplementedBifrostServer() {}
func (UnimplementedBifrostServer) testEmbeddedByValue()                 {}

// UnsafeBifrostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BifrostServer will
// result in compilation errors.
type UnsafeBifrostServer interface {
	mustEmbedUnimplementedBifrostServer()
}

func RegisterBifrostServer(s grpc.ServiceRegistrar, srv BifrostServer) {
	// If the following call pancis, it indicates UnimplementedBifrostServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Bifrost_ServiceDesc, srv)
}

func _Bifrost_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BifrostServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bifrost_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BifrostServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bifrost_GetContainerRegistryLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerRegistryLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BifrostServer).GetContainerRegistryLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bifrost_GetContainerRegistryLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BifrostServer).GetContainerRegistryLogin(ctx, req.(*GetContainerRegistryLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bifrost_ServiceDesc is the grpc.ServiceDesc for Bifrost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bifrost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "azure.v1.Bifrost",
	HandlerType: (*BifrostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _Bifrost_GetToken_Handler,
		},
		{
			MethodName: "GetContainerRegistryLogin",
			Handler:    _Bifrost_GetContainerRegistryLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "azure.proto",
}
